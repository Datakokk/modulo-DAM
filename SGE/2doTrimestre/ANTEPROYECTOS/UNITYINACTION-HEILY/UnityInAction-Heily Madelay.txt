# UnityInAction - Aplicaci√≥n de Gesti√≥n de Usuarios, Noticias y Donaciones

## üìö Descripci√≥n del Proyecto
UnityInAction es una plataforma dise√±ada para facilitar la gesti√≥n de usuarios, publicaci√≥n de noticias y donaciones relacionadas con iniciativas solidarias, voluntariados, organizaciones profesionales o reporterismo ciudadano.

El objetivo principal es proporcionar un espacio donde diferentes tipos de usuarios (Organizaciones, Voluntarios, Profesionales, Donantes y Reporteros Ciudadanos) puedan:

- Registrarse e iniciar sesi√≥n.
- Publicar y visualizar noticias de inter√©s.
- Gestionar donaciones para apoyar a Organizaciones.
- Ofrecerse para realizar voluntariados con las Organizaciones.

## üåê Conectividad
La aplicaci√≥n se conecta a servidores remotos de Firebase para:
- Almacenamiento de datos en tiempo real
- Autenticaci√≥n de usuarios
- Gesti√≥n de archivos
- Env√≠o de notificaciones push
- Procesamiento de donaciones

## ‚ú® Caracter√≠sticas Principales

### Gesti√≥n de Usuarios
- Registro de diferentes tipos de usuarios: Organizaci√≥n, Reportero Ciudadano, Voluntario, Profesional y Donante.
- Campos espec√≠ficos para cada tipo de usuario (ej. profesiones, certificados, disponibilidad, datos de pago, etc.).
- Validaci√≥n de datos como correo electr√≥nico, nombre y tel√©fono.

### Inicio de Sesi√≥n
- Autenticaci√≥n con correo electr√≥nico y contrase√±a mediante Firebase Auth.
- Gesti√≥n de sesi√≥n activa mediante SharedPreferences.

### Gesti√≥n de Noticias
- Subida de noticias por usuarios autorizados (Organizaciones, Reporteros).
- Informaci√≥n detallada: t√≠tulo, contenido, tags, ubicaci√≥n, requerimientos, etc.
- Edici√≥n y eliminaci√≥n de noticias propias.
- Visualizaci√≥n completa de una noticia al seleccionarla mediante ActivityDetalleNoticia.
- B√∫squeda integrada para filtrar noticias por palabras clave.

### Donaciones
- Los usuarios pueden realizar donaciones a Organizaciones dentro de la aplicaci√≥n.
- Se soporta el pago mediante PayPal, lo que permite realizar transacciones seguras y r√°pidas.
- El proceso de pago se realiza a trav√©s de la API de PayPal, garantizando la seguridad de la informaci√≥n financiera de los usuarios.
- Se validan los datos de la transacci√≥n antes de confirmar la donaci√≥n.
- Confirmaci√≥n instant√°nea de la donaci√≥n con notificaciones en tiempo real.

### Notificaciones Push
Integraci√≥n con Firebase Cloud Messaging para enviar notificaciones cuando:
- Se publica una nueva noticia.
- Se realiza una donaci√≥n.
- Se actualiza una noticia importante.

### Seguridad y Autenticaci√≥n Mejorada
- Contrase√±as encriptadas para mayor seguridad.
- Autenticaci√≥n con Google o Facebook.

### Geolocalizaci√≥n y Mapas
- Filtro de noticias basadas en la ubicaci√≥n actual del usuario.
- Visualizaci√≥n de la ubicaci√≥n de las noticias en un mapa interactivo (Google Maps API).

### Tema Oscuro
- Modo oscuro para mejorar la experiencia del usuario.

## üóÇ Estructura del Proyecto

### Activities Principales
- ActivityIniciar - Pantalla de inicio de sesi√≥n.
- ActivityRegistrarse - Registro din√°mico seg√∫n tipo de usuario.
- ActivityPerfilUsuario - Gesti√≥n de perfil y noticias propias.
- ActivityVernoticias - Visualizaci√≥n general de noticias con buscador.
- ActivityDetalleNoticia - Pantalla para visualizar la informaci√≥n completa de una noticia seleccionada.
- ActivityDonaciones - Gesti√≥n de donaciones.
- EditarNoticiaActivity - Edici√≥n de noticias existentes.
- MainActivity - Pantalla principal con accesos r√°pidos.

### Clases Soporte
- FirestoreHelper - Gesti√≥n de conexiones con Firebase Firestore.
- NoticiasAdapter - Adaptador para la lista de noticias.
- Noticia - Modelo de datos para las noticias.

## üìä Arquitectura del Proyecto
La aplicaci√≥n sigue una arquitectura cliente-servidor con los siguientes componentes:

### Backend (Servidor Remoto)
- Firebase Firestore: Base de datos NoSQL en la nube para almacenar usuarios, noticias y donaciones.
- Firebase Authentication: Gesti√≥n de autenticaci√≥n de usuarios.
- Firebase Cloud Functions: L√≥gica de backend para validar donaciones y enviar notificaciones.

### Frontend (Android)
- Activities y Fragments: Interfaz de usuario en Java/XML.
- SDK de Firebase: Comunicaci√≥n con el backend mediante Firestore y Auth.

## üîß Requisitos Previos

### Software
- Android Studio o IDE compatible con Android.
- Gradle instalado (incluido en Android Studio).
- Cuenta de Firebase y archivo de configuraci√≥n google-services.json.

### Dispositivos
- Android 5.0 (Lollipop) o superior (f√≠sico o emulador).
- Conexi√≥n a Internet para acceder a los servicios de Firebase.

## üöÄ Instalaci√≥n y Ejecuci√≥n

### Instalaci√≥n
1. Clona este repositorio o copia los archivos del proyecto a tu m√°quina local.
2. Abre Android Studio.
3. Selecciona "Open an existing project".
4. Navega hasta la carpeta del proyecto y selecci√≥nala.
5. Espera a que Gradle sincronice el proyecto.
6. Configura Firebase:
   - A√±ade el archivo google-services.json al proyecto
   - Verifica las dependencias de Firebase en build.gradle

### Ejecuci√≥n
1. Conecta tu dispositivo Android o inicia un emulador.
2. Haz clic en el bot√≥n "Run" (icono ‚ñ∂).
3. Selecciona el dispositivo o emulador deseado.
4. Una vez compilado, la aplicaci√≥n se iniciar√° autom√°ticamente.

## üîß Pruebas
Se han implementado pruebas para garantizar el correcto funcionamiento de la aplicaci√≥n:
- Pruebas unitarias: Usando JUnit y Mockito para validar la l√≥gica de negocio.
- Pruebas de interfaz: Usando Espresso para verificar la navegaci√≥n y funcionalidad de la UI.

## üõ†Ô∏è Seguridad y Mejoras
- Cifrado de contrase√±as: Implementado para evitar almacenamiento en texto plano.
- Reglas de seguridad en Firestore: Control de acceso granular a los datos.
- Autenticaci√≥n multifactor disponible.

## üí° Mejoras Futuras
- Incorporar soporte para m√∫ltiples idiomas (espa√±ol e ingl√©s).
- Optimizar la UI con Jetpack Compose.
- Implementar sincronizaci√≥n offline para mejorar la experiencia sin conexi√≥n.

## üíª Tecnolog√≠as Utilizadas

### Frontend
- Java
- XML (layouts y Material Design)

### Backend y Base de Datos (Servidor Remoto)
Firebase:
- Firestore: Base de datos NoSQL en la nube
- Authentication: Gesti√≥n de usuarios
- Cloud Functions: L√≥gica de servidor
- Storage: Almacenamiento de archivos
- FCM: Notificaciones push
  
Pasarela de Pago:
- PayPal API: Procesamiento seguro de donaciones

### Herramientas de Desarrollo
- Android Studio
- Gradle
- GitHub
- Espresso, JUnit y Mockito para pruebas

## üëâ Licencia
Este proyecto no cuenta con una licencia espec√≠fica. Se presenta como c√≥digo abierto para su revisi√≥n y mejora.